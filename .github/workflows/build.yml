name: Build

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # define a cache
      - name: Cache buildozer
        id: cache-buildozer
        uses: actions/cache@v3
        env:
          cache-name: cache-buildozer-and-brainbay
        with:
          path: |
            .buildozer_global
            .buildozer
            brainflow
            .venv
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('buildozer.spec') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-buildozer.outputs.cache-hit != 'true' }}
        name:
        continue-on-error: true
        run: |
          echo "cache not found: do all the number crunching"

      # see if cache was found and run a check command
      - if: ${{ steps.cache-buildozer.outputs.cache-hit == 'true' }}
        name: cache found -> List contents of cached dirs and pip
        continue-on-error: true
        run: |
          echo "currennt dir:"
          pwd
          ls -lA
          echo "----pip list (NOT venv)---"
          pip list
          echo "----content of .buildozer---"
          ls -lA .buildozer
          echo "----content of .buildozer_global---"
          ls -lA .buildozer_global
          echo "----content of .venv----"
          ls -lA .venv
          echo "----content of brainbay----"
          ls -lA brainflow

      - name: pip venv start / create
        run: |
          if [ ! -d ".venv" ]; then
            echo "create venv in .venv"
            python -m venv ./.venv
          els
            echo "pip venv found in cached folder: .venv"
          fi
          source ./.venv/bin/activate
          echo "(venv) pip list"
          pip list

      - name: Install venv & dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install "kivy[base,media]" kivy_examples
          python -m pip install matplotlib ninja numpy cmake
          # pip install -r requirements.txt

      - name: (venv) pip list & Kivy and brainflow details (last check before compiling)
        continue-on-error: true
        run: |
          echo "--pip list:"
          pip list
          #python -c "import kivy; print(f'Kivy version: {kivy.__version__}')"
          echo "--pip show: kivy & brainflow"
          pip show brainflow kivy kivy-garden

          #  # if dir brainflow exists, this will just throw an error and give up
          #  - name: Clone brainflow repository
          #    continue-on-error: true
          #    uses: actions/checkout@v3
          #    with:
          #      repository: brainflow-dev/brainflow
          #      ref: master # specify the branch or commit you want to clone
          #      path: brainflow # specify the destination directory where you want to clone

      - name: Compile brainflow
        run: |
          if ! pip show brainflow; then
            # download the sourcefiles
            if [ ! -d "brainflow" ]; then
              git clone --single-branch --branch master https://github.com/brainflow-dev/brainflow.git
            else
              echo "repository downloaded found in cache. go straight to comipling.. "
            fi
            echo "brainflow package not yet installed. compiling and installing..."
            cd brainflow
            rm build/* -rf
            cd tools
            python build.py
            cd ../python_package
            python -m pip install -U .
            cd ../..
          else
            echo "brainflow package already installed. skip compiling."
          fi
          # if [ -f "build/libBrainflow.a" ] && \
          #    [ -f "build/libDSPFilters.a" ] && \
          #    [ -f "build/libWaveLib.a" ] && \
          #    [ -f "build/libkissfft-double.a" ]; then
          #   # Run your command here
          #   echo "All files exist, no need to comiple"
          # else
          #   echo "One or more files are missing, removing build dir and run build.py"
          # fi

      - name: Check Brainflow version
        continue-on-error: true
        run: |
          python -c "from brainflow.board_shim import BoardShim; print( 'Brainflow version: ' + BoardShim.get_version() )"
          pip show brainflow kiwy kivy-garden

      #---compile with buildozer

      - name: Build with Buildozer
        uses: ArtemSBulgakov/buildozer-action@v1
        id: buildozer
        with:
          command: buildozer android debug
          buildozer_version: master

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: package
          path: ${{ steps.buildozer.outputs.filename }}
