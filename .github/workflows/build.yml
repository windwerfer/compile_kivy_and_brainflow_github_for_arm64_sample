name: Build

on: [push, pull_request]

# # for a windows mashine.. krass
# jobs:
#   build:
#     runs-on: windows-latest
#     steps:
#       - uses: actions/checkout@v2
#       - uses: actions/setup-dotnet@v1
#       - name: Build
#         run: dotnet build
#       - name: Run tests
#         run: dotnet test

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # https://github.com/actions/setup-python#caching-packages-dependencies
      # this will create a venv to be used with this job,
      # it will be cache automatically and loaded for each run
      # the requirements file defines what packages will be cached, but will not install them
      - uses: actions/setup-python@v4
        name: create cachable pip venv (load/store automatically)
        with:
          python-version: "3.9"
          cache: "pip" # caching pip dependencies
          cache-dependency-path: |
            requirements.txt
            requirements_manually_installed.txt

      # define a cache
      - name: load and store Cached folders (stores only if workflow build successfully)
        id: cache-buildozer
        uses: actions/cache@v3
        env:
          cache-name: cache-buildozer-and-brainbay
        with:
          path: |
            .buildozer_global
            .buildozer
            #.venv
            brainflow
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('buildozer.spec') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-buildozer.outputs.cache-hit != 'true' }}
        name: cache not found
        continue-on-error: true
        run: |
          echo "cache not found: do all the number crunching"
          echo "currennt dir:"
          pwd
          ls -lA
          echo "---- $VIRTUAL_ENV_PROMPT pip list (NOT venv?)--- VIRTUAL_ENV= $VIRTUAL_ENV "
          pip list

      # see if cache was found and run a check command
      - if: ${{ steps.cache-buildozer.outputs.cache-hit == 'true' }}
        name: cache found -> List contents of cached dirs and pip
        continue-on-error: true
        run: |
          if [ "$VIRTUAL_ENV_PROMPT" == "" ]; then
            echo "no venv yet loaded"
          else
            echo "venv $VIRTUAL_ENV_PROMPT loaded from folder $VIRTUAL_ENV"
          fi
          echo "currennt dir:"
          pwd
          ls -lA
          echo "---- $VIRTUAL_ENV_PROMPT pip list (NOT venv?)--- VIRTUAL_ENV= $VIRTUAL_ENV "
          pip list
          echo "----content of .buildozer---"
          ls -lA .buildozer
          echo "----content of .buildozer_global---"
          ls -lA .buildozer_global
          # echo "----content of .venv----"
          # ls -lA .venv
          # echo "----content of .venv/lib/python*/site-packages"
          # ls -lA .venv/lib/python*/site-packages/
          echo "----content of brainbay----"
          ls -lA brainflow

      #  # using buildin method now..
      #  - name: pip venv start / create
      #    run: |
      #      if [ ! -d ".venv" ]; then
      #        echo "create venv in .venv"
      #        python -m venv ./.venv
      #      else
      #        echo "pip venv found in cached folder: .venv"
      #      fi
      #      source ./.venv/bin/activate
      #      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
      #      # https://docs.github.com/en/actions/learn-github-actions/variables#passing-values-between-steps-and-jobs-in-a-workflow
      #      # every run starts a new bash, so variables like PATH will just be set new
      #      # venv works because it prepends $VIRTUAL_ENV to $PATH
      #      # to keep the variable: echo PATH=$PATH >> $GITHUB_ENV
      #      # or source the venv every run..
      #      #  there is also the option to add to $PATH through (will be loaded every run,
      #      #  but might be overridden by $GITHUB_ENV?)
      #      #  echo "newPath" >> $GITHUB_PATH
      #      # one way to retrieve var in $GITHUB_ENV is with:
      #      #  echo "${{ env.someVariable }}"
      #      echo "PATH=$PATH" >> $GITHUB_ENV
      #      echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
      #      echo "VIRTUAL_ENV_PROMPT=$VIRTUAL_ENV_PROMPT" >> $GITHUB_ENV
      #      echo "MYTEST1=heoooo" >> $GITHUB_ENV
      #      if [ "$VIRTUAL_ENV_PROMPT" == "" ]; then
      #        echo "no venv yet loaded"
      #      else
      #        echo "venv $VIRTUAL_ENV_PROMPT loaded from folder $VIRTUAL_ENV"
      #      fi
      #      echo "$VIRTUAL_ENV_PROMPT pip list"
      #      pip list

      # now done through the requirements.txt file
      - name: pip install requirements / dependencies
        run: |
          echo "--pip list before---"
          pip list
          pip install -r "requirements.txt"
          echo "--pip list after---"
          pip list
          # python -m pip install --upgrade pip
          # python -m pip install "kivy[base,media]" kivy_examples
          # python -m pip install matplotlib ninja numpy cmake
          # pip install -r requirements.txt

      - name: try to install brainflow from cache
        continue-on-error: true
        run: |
          echo "--pip list before---"
          pip list
          pip install -r "requirements_manually_installed.txt"
          echo "--pip list after---"
          pip list

      - name: (venv) pip list & Kivy and brainflow details (last check before compiling)
        continue-on-error: true
        run: |
          echo "--pip list: VIRTUAL_ENV= $VIRTUAL_ENV"
          pip list
          #python -c "import kivy; print(f'Kivy version: {kivy.__version__}')"
          echo "--pip show: kivy & brainflow"
          pip show brainflow kivy kivy-garden

          #  # if dir brainflow exists, this will just throw an error and give up
          #  - name: Clone brainflow repository
          #    continue-on-error: true
          #    uses: actions/checkout@v3
          #    with:
          #      repository: brainflow-dev/brainflow
          #      ref: master # specify the branch or commit you want to clone
          #      path: brainflow # specify the destination directory where you want to clone

      - name: Compile brainflow
        run: |
          if ! pip show brainflow; then
            echo "brainflow package not yet installed. compiling and installing..."
            # download the sourcefiles
            if [ ! -d "brainflow" ]; then
              git clone --single-branch --branch master https://github.com/brainflow-dev/brainflow.git
            else
              echo "already downloaded git repository found in cache. go straight to comipling.. "
            fi
            cd brainflow
            #rm build/* -rf
            cd tools
            python build.py
            cd ../python_package
            python -m pip install -U .
            cd ../..
          else
            echo "brainflow package already installed. skip compiling."
          fi
          # if [ -f "build/libBrainflow.a" ] && \
          #    [ -f "build/libDSPFilters.a" ] && \
          #    [ -f "build/libWaveLib.a" ] && \
          #    [ -f "build/libkissfft-double.a" ]; then
          #   # Run your command here
          #   echo "All files exist, no need to comiple"
          # else
          #   echo "One or more files are missing, removing build dir and run build.py"
          # fi

      - name: Check Brainflow version
        continue-on-error: true
        run: |
          echo "$VIRTUAL_ENV_PROMPT pip show: kivy & brainflow        VIRTUAL_ENV= $VIRTUAL_ENV"
          pip show brainflow kivy kivy-garden
          echo "$VIRTUAL_ENV_PROMPT pip list       VIRTUAL_ENV= $VIRTUAL_ENV"
          pip list
          # echo "----content of .venv/lib/python*/site-packages"
          # ls -lA .venv/lib/python*/site-packages/
          echo "----list pip in requirements.txt syntax---"
          pip freeze
          #python -c "from brainflow.board_shim import BoardShim; print( 'Brainflow version: ' + BoardShim.get_version() )"

      #---compile with buildozer

      - name: Build with Buildozer
        uses: ArtemSBulgakov/buildozer-action@v1
        id: buildozer
        with:
          command: buildozer android debug
          buildozer_version: master

      # remove all prev arefacts (otherwise the artefacts quota might be triggered -its monthly)
      # or set to public repo (maybe need to wait a while untill github updated the stats)
      # - name: Delete Old Artifacts
      #   uses: actions/github-script@v6
      #   id: artifact
      #   with:
      #     script: |
      #       const res = await github.rest.actions.listArtifactsForRepo({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #       })

      #       res.data.artifacts
      #         .forEach(({ id }) => {
      #           github.rest.actions.deleteArtifact({
      #             owner: context.repo.owner,
      #             repo: context.repo.repo,
      #             artifact_id: id,
      #           })
      #         })

      # create the output apk for uploading
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: package
          path: ${{ steps.buildozer.outputs.filename }}
